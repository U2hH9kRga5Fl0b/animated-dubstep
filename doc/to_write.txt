
generate random city
translate


generate random solution
	make sure it is feasible


simulate
	null solution
	random solution
	0 requests serviced but allot of traffic between staging areas
	specific number of requests serviced
	0 serviced with several landfills
	0 landfills?
	0 yards
	
	have incorrect size
	have incorrect time

	have negative inventory
	have inventory over capacity
	have inventory over capacity in initial inventory (whether this belongs as a test to the simulate function or not, we should have it as a test.)

	repeated stop in same route
	repeated stop in different route
	repeated stop but it is only a staging area
	repeated stop but it is only a land fill



	
	
Remaining methods (not assigned to Trever):

Matt:
get total time for each driver:                                                 count_times.m
make sure no request is serviced twice:                                         satisfies_no_overlap.m

Cody:
get the total distance driven:                                                  count_distances.m
each truck starts at the start location:                                        satisfies_truck_begin_end.m

Tamlyn:
Verify that the sizes match from stop to stop:                                  satisfies_sizes_follow.m
Verify that the first operation of each truck is either 'U' or 'P'              satisfies_starts_with_no_dumpster.m


not assigned:
count the deviations from the time a request is supposed to be performed:	count_time_violations.m
for each stop, check if the time is within the time window for that action:     satisfies_time_windows.m
	all! the tests

	
	


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


functions to write:

helper:
	DONE		matrix of times when each stop is serviced

constraints (return boolean):
	MATT		make sure no request is serviced twice
	DONE		verify that the operations follow each other
	TAMLYN		verify the first stop doesn't have a dumpster going in to it
	TAMLYN		verify that the sizes match from stop to stop (bigger can serve smaller!!!)
	TREVER		count the inventory at each stop and make sure that it is within capacity and non-negative (somewhat harder to code than most other functions)
	CODY		function to return whether a truck ends where it starts (maybe won't be used)
	TREVER		all action/truck type/operation constraints met

other:
			count the difference between the time that a truck is supposed to be at a stop and the time it actually is.


objectives:
	MATT		get total time for each driver
	TREVER		count the number of requests that have been serviced
	CODY		get the total distance driven
	TREVER		get the total number of fees



